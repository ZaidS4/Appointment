
<link href="~/Scripts/bootstrap-multiselect.css" rel="stylesheet" />
<script src="~/Scripts/bootstrap-multiselect.js"></script>


<script src="~/Scripts/jquery.validate.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
@model  Appointment.ViewModel.Models.EmployeesGroupsViewModel
@{
    ViewBag.Title = "Edit Group Info";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<br />
<br />
<h1>Edit Group</h1>
<hr />

<br />
<br />
<br />
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()


    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>
    <br />
    <br />
    <br />
    <br />
    <div class="form-group">
        @Html.Label("Employees", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-9">
            <div class="dropdown">
                @Html.ListBoxFor(m => m.SelectedEmployeesID, new MultiSelectList(Model.Employees, "Value", "Text", Model.SelectedEmployeesID), new { id = "Employees", multiple = "multiple" })
                @Html.ValidationMessageFor(m => m.SelectedEmployeesID, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <br />
    <br />
    <br />
    <br />
    <br />
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Edit" class="btn btn-default" />
            <input type="button" value="Back" class="btn btn-default" onclick="location.href='@Url.Action("Groups", "Groups")'" />
        </div>
    </div>

}
<br />
<br />

<script type="text/javascript">
    $(document).ready(function () {
        $('#Employees').multiselect({
            includeSelectAllOption: true,
            enableCaseInsensitiveFiltering: true,
            enableFiltering: true,
            maxHeight: 200
        });



        $("form").submit(function () {
            debugger;
            $('button[type=button], input[type=button]').prop('disabled', true);
            $('button[type=submit], input[type=submit]').prop('disabled', true);
            $("form").each(function () { $.data($(this)[0], 'validator', false); });
            var fom = $("form");
            $.validator.unobtrusive.parse(fom);
            if ($("form").valid()) {
                //fillFieldsForSubmit();
            }
            else {
                $("form").valid();
                $("form").each(function () { $.data($(this)[0], 'validator', false); });
                $.validator.unobtrusive.parse("form");
                $('button[type=button], input[type=button]').removeAttr('disabled');
                $('button[type=submit], input[type=submit]').removeAttr('disabled');
            }
        });
    });
</script>
