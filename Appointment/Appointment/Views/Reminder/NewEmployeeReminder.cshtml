@model Appointment.ViewModel.Models.EmployeeRemindersViewModel

@{
    ViewBag.Title = "New Employee Reminder";
    Layout = "~/Views/Shared/_Layout.cshtml";


}


<br />
<br />
<div>
    <h2>Create Employee Reminder</h2>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">

            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.Label("Title", htmlAttributes: new { @class = "control-label col-md-2" })<a style="color:red">*</a>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Birth Date", htmlAttributes: new { @class = "control-label col-md-2" })<a style="color:red">*</a>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @Id = "Birth", @class = "form-control", @value = "01/01/2000" } })
                    @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Start Date", htmlAttributes: new { @class = "control-label col-md-2" })<a style="color:red">*</a>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @Id = "Start", @class = "form-control", @Value = DateTime.Now.Date.ToString() } })
                    @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Position", htmlAttributes: new { @class = "control-label col-md-2" })<a style="color:red">*</a>
                <div class="col-md-10">
                    <div class="dropdown">
                        @Html.DropDownListFor(m => m.PositionID, new SelectList(Model.Positions, "Value", "Text"), new { @class = "form-control" ,@Id="Position"})
                        @Html.ValidationMessageFor(model => model.PositionID, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Employee", htmlAttributes: new { @class = "control-label col-md-2" })<a style="color:red">*</a>
                <div class="col-md-10">
                    <div class="dropdown">
                        @Html.DropDownListFor(m => m.EmployeeID, new SelectList(Model.Employees, "Value", "Text"), new { @Id = "employee" })

                        @Html.ValidationMessageFor(model => model.EmployeeID, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })<a style="color:red">*</a>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @Id = "Email", @ReadOnly = "ReadOnly" } })
                    @*@Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger", @id = "EmailError" })*@
                    <label id="EmailError" style="display:none;color:red;">This Email is already used !</label>
                </div>

            </div>

            <div class="form-group">
                @Html.Label("Active", htmlAttributes: new { @class = "control-label col-md-2" })<a style="color:red">*</a>
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.CheckBoxFor(model => model.IsActive)
                        @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" id="btnSubmit" />
                    <input type="button" value="Back" class="btn btn-default" onclick="location.href='@Url.Action("Index", "Reminder")'" />
                </div>
            </div>
        </div>
    }
</div>


<link href="https://kendo.cdn.telerik.com/2019.2.619/styles/kendo.common.min.css" rel="stylesheet" type="text/css" />
<link href="https://kendo.cdn.telerik.com/2019.2.619/styles/kendo.default.min.css" rel="stylesheet" type="text/css" />
<script src="https://kendo.cdn.telerik.com/2019.2.619/js/jquery.min.js"></script>
<script src="https://kendo.cdn.telerik.com/2019.2.619/js/kendo.all.min.js"></script>


<link href="~/Scripts/bootstrap-multiselect.css" rel="stylesheet" />
<script src="~/Scripts/bootstrap-multiselect.js"></script>

<script>
    $(document).ready(function () {
        $('#Position').multiselect({
            includeSelectAllOption: false,
            enableCaseInsensitiveFiltering: true,
            enableFiltering: true,
            multiselect: false,
            maxHeight: 200
        });


        $('#employee').multiselect({
            includeSelectAllOption: false,
            enableCaseInsensitiveFiltering: true,
            enableFiltering: true,
            multiselect: false,
            maxHeight: 200
        });


        var presentDate = new Date();
        var varDate = new Date((new Date().getFullYear() - 18), 0, 1);
            $("#Birth").kendoDatePicker({
                value: new Date(1980, 01, 01),
                max: varDate
        });

        $("#Start").kendoDatePicker({
            value: presentDate,
            min: presentDate,
        });
        var nowDate = Date.now.toString();

        $('#employee').change(function () {
            $("#EmailError").hide();
            $('#btnSubmit').removeAttr('disabled');
            var EmploeeID = $('#employee').val();
            $.ajax({
                url: '@Url.Action("FetchEmail", "Reminder")/?ID=' + EmploeeID ,
                type: "GET",
                cache: false,
                async: false,
                includeSelectAllOption: true,
                enableCaseInsensitiveFiltering: true,
                enableFiltering: true,
                //data: { ID: EmploeeID },
                datatype: "json",
                success: function (response) {
                    $('#Email').val(response.Email);
                    var lblEmailValidation = $("#EmailError");
                    var btnSubmit =          $('#btnSubmit');
                    if (response.used) {
                        lblEmailValidation.show();
                        btnSubmit.attr('disabled', 'true');
                    } else {
                        lblEmailValidation.hide();
                        btnSubmit.removeAttr('disabled');
                    }
                },
                error: function (error) {
                    debugger;
                    alert(error);
                }
            });
        });

    });



</script>