@model Appointment.ViewModel.Models.EmployeeRemindersViewModel

@{
    ViewBag.Title = "Employee Reminder Update";
    Layout = "~/Views/Shared/_Layout.cshtml";


}

<br />
<br />
<div>
    <h2>Employee Reminder Edit</h2>

    @using (Html.BeginForm("EmployeeReminderUpdate", "Reminder", FormMethod.Post, new { enctype = "multipart/form-data" }))

    {
        @Html.AntiForgeryToken()

    <div class="form-horizontal">


        <hr />
        @Html.HiddenFor(model => model.ID, new { htmlAttributes = new { @Id = "ReminderID" } })

        <div class="form-group">
            @Html.Label("Title", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Birth Date", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @Id = "Birth", @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Start Date", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @Id = "Start", @class = "form-control", value = "{0:dd/MM/yyyy}" } })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Position", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="dropdown">
                    @Html.DropDownListFor(m => m.PositionID, new SelectList(Model.Positions, "Value", "Text"), new { @class = "form-control", @Id = "Position" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Employees", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="dropdown">
                    @Html.DropDownListFor(m => m.EmployeeID, new SelectList(Model.Employees, "Value", "Text"), new { @Id = "employee" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @ReadOnly = "ReadOnly" } })
                <label id="EmailError" style="display:none;color:red;">This Email is already used !</label>
            </div>
        </div>
     
        <div class="form-group">
            @Html.Label("Image", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="col-md-10">
                    <input type="file" name="image1" id="image1" class="form-control" />
                    @if (Model.ImagePath != null)
                    {
                    <img id="myImg" src="@Url.Content(Model.ImagePath)"  height="40px" width="40px"/>

                    }
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Active", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsActive)
                </div>
            </div>
        </div>



        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Edit" class="btn btn-default" id="btnSubmit" />
                <input type="button" value="Back" class="btn btn-default" onclick="location.href='@Url.Action("Index", "Reminder")'" />
            </div>
        </div>
    </div>
    }
</div>


<link href="https://kendo.cdn.telerik.com/2019.2.619/styles/kendo.common.min.css" rel="stylesheet" type="text/css" />
<link href="https://kendo.cdn.telerik.com/2019.2.619/styles/kendo.default.min.css" rel="stylesheet" type="text/css" />
<script src="https://kendo.cdn.telerik.com/2019.2.619/js/jquery.min.js"></script>
<script src="https://kendo.cdn.telerik.com/2019.2.619/js/kendo.all.min.js"></script>


<link href="~/Scripts/bootstrap-multiselect.css" rel="stylesheet" />
<script src="~/Scripts/bootstrap-multiselect.js"></script>
<script>
    $(document).ready(function () {
        $('#Position').multiselect({
            includeSelectAllOption: false,
            enableCaseInsensitiveFiltering: true,
            enableFiltering: true,
            multiselect: false,
            maxHeight: 200
        });


        $('#employee').multiselect({
            includeSelectAllOption: false,
            enableCaseInsensitiveFiltering: true,
            enableFiltering: true,
            multiselect: false,
            maxHeight: 200
        });


        var presentDate = new Date();
        var varDate = new Date((new Date().getFullYear() - 18), 0, 1);
            $("#Birth").kendoDatePicker({
                max: varDate
        });

        $("#Start").kendoDatePicker({
            min: presentDate,
        });
        var nowDate = Date.now.toString();
        //'GlobalExposures / Replicate ? q = ' + $("#HdnReplicateID").val()+ "&ContractStatusID=" + $("#ContractStatusID").val();
        $('#employee').change(function () {
            $("#EmailError").hide();
            $('#btnSubmit').removeAttr('disabled');
            var EmploeeID = $('#employee').val();

            $.ajax({
                url: '@Url.Action("FetchEmail", "Reminder")/?ID=' + EmploeeID + "&ReminderID=" + @Model.ID ,
                type: "GET",
                cache: false,
                async: false,
                includeSelectAllOption: true,
                enableCaseInsensitiveFiltering: true,
                enableFiltering: true,
                //data: { ID: EmploeeID },
                datatype: "json",
                success: function (response) {
                    $('#Email').val(response.Email);
                    var lblEmailValidation = $("#EmailError");
                    var btnSubmit = $('#btnSubmit');
                    debugger;
                    if (response.CanBeUsed) {
                        lblEmailValidation.hide();
                        btnSubmit.removeAttr('disabled');
                    } else {
                        lblEmailValidation.show();
                        btnSubmit.attr('disabled', 'true');
                    }
                },
                error: function (error) {
                    debugger;
                    alert(error);
                }
            });
        });

    });


    jQuery(function () {
        debugger;
        $("form").submit(function () {
            // submit more than once return false
            $(this).submit(function () {
                return false;
            });
            // submit once return true
            return true;
        });
    });


    //Image Uploader
    $(function () {
        debugger;
        $(":file").change(function () {
            if (this.files && this.files[0]) {
                var reader = new FileReader();

                reader.onload = imageIsLoaded;
                reader.readAsDataURL(this.files[0]);
            }
        });
    });

    function imageIsLoaded(e) {
        $('#myImg').attr('src', e.target.result);
    };
</script>